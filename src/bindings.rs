/* automatically generated by rust-bindgen 0.69.4 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _WCHAR_H: u32 = 1;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __GNUC_VA_LIST: u32 = 1;
pub const __wint_t_defined: u32 = 1;
pub const _WINT_T: u32 = 1;
pub const __mbstate_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const WEOF: u32 = 4294967295;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub const IHS_IPAddressFamily_IHS_IPAddressFamilyIPv4: IHS_IPAddressFamily = 0;
pub const IHS_IPAddressFamily_IHS_IPAddressFamilyIPv6: IHS_IPAddressFamily = 1;
pub type IHS_IPAddressFamily = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union IHS_IPAddress {
    pub family: IHS_IPAddressFamily,
    pub v4: IHS_IPAddress__bindgen_ty_1,
    pub v6: IHS_IPAddress__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_IPAddress__bindgen_ty_1 {
    pub family: IHS_IPAddressFamily,
    pub data: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_IHS_IPAddress__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_IPAddress__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_IPAddress__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(IHS_IPAddress__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_IPAddress__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(IHS_IPAddress__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_IPAddress__bindgen_ty_1),
            "::",
            stringify!(family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_IPAddress__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_IPAddress__bindgen_ty_2 {
    pub family: IHS_IPAddressFamily,
    pub data: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_IHS_IPAddress__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_IPAddress__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_IPAddress__bindgen_ty_2>(),
        20usize,
        concat!("Size of: ", stringify!(IHS_IPAddress__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_IPAddress__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(IHS_IPAddress__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_IPAddress__bindgen_ty_2),
            "::",
            stringify!(family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_IPAddress__bindgen_ty_2),
            "::",
            stringify!(data)
        )
    );
}
#[test]
fn bindgen_test_layout_IHS_IPAddress() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_IPAddress> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_IPAddress>(),
        20usize,
        concat!("Size of: ", stringify!(IHS_IPAddress))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_IPAddress>(),
        4usize,
        concat!("Alignment of ", stringify!(IHS_IPAddress))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_IPAddress),
            "::",
            stringify!(family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_IPAddress),
            "::",
            stringify!(v4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v6) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_IPAddress),
            "::",
            stringify!(v6)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IHS_SocketAddress {
    pub ip: IHS_IPAddress,
    pub port: u16,
}
#[test]
fn bindgen_test_layout_IHS_SocketAddress() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_SocketAddress> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_SocketAddress>(),
        24usize,
        concat!("Size of: ", stringify!(IHS_SocketAddress))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_SocketAddress>(),
        4usize,
        concat!("Alignment of ", stringify!(IHS_SocketAddress))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ip) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_SocketAddress),
            "::",
            stringify!(ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_SocketAddress),
            "::",
            stringify!(port)
        )
    );
}
extern "C" {
    pub fn IHS_IPAddressToString(address: *const IHS_IPAddress) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn IHS_IPAddressFromString(
        address: *mut IHS_IPAddress,
        str_: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn IHS_IPAddressCompare(
        a: *const IHS_IPAddress,
        b: *const IHS_IPAddress,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_ClientConfig {
    pub deviceId: u64,
    pub secretKey: *const u8,
    pub deviceName: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_IHS_ClientConfig() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_ClientConfig> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_ClientConfig>(),
        24usize,
        concat!("Size of: ", stringify!(IHS_ClientConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_ClientConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(IHS_ClientConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_ClientConfig),
            "::",
            stringify!(deviceId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).secretKey) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_ClientConfig),
            "::",
            stringify!(secretKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceName) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_ClientConfig),
            "::",
            stringify!(deviceName)
        )
    );
}
pub const IHS_SteamUniverse_IHS_SteamUniversePublic: IHS_SteamUniverse = 1;
pub const IHS_SteamUniverse_IHS_SteamUniverseBeta: IHS_SteamUniverse = 2;
pub const IHS_SteamUniverse_IHS_SteamUniverseInternal: IHS_SteamUniverse = 3;
pub const IHS_SteamUniverse_IHS_SteamUniverseDev: IHS_SteamUniverse = 4;
pub type IHS_SteamUniverse = ::std::os::raw::c_uint;
pub const IHS_SteamOSType_IHS_SteamOSTypeWeb: IHS_SteamOSType = -700;
pub const IHS_SteamOSType_IHS_SteamOSTypeIos: IHS_SteamOSType = -600;
pub const IHS_SteamOSType_IHS_SteamOSTypeAndroid: IHS_SteamOSType = -500;
pub const IHS_SteamOSType_IHS_SteamOSTypeAndroid6: IHS_SteamOSType = -499;
pub const IHS_SteamOSType_IHS_SteamOSTypeAndroid7: IHS_SteamOSType = -498;
pub const IHS_SteamOSType_IHS_SteamOSTypeAndroid8: IHS_SteamOSType = -497;
pub const IHS_SteamOSType_IHS_SteamOSTypeAndroid9: IHS_SteamOSType = -496;
pub const IHS_SteamOSType_IHS_SteamOSTypePs3os: IHS_SteamOSType = -300;
pub const IHS_SteamOSType_IHS_SteamOSTypeLinux: IHS_SteamOSType = -203;
pub const IHS_SteamOSType_IHS_SteamOSTypeLinux22: IHS_SteamOSType = -202;
pub const IHS_SteamOSType_IHS_SteamOSTypeLinux24: IHS_SteamOSType = -201;
pub const IHS_SteamOSType_IHS_SteamOSTypeLinux26: IHS_SteamOSType = -200;
pub const IHS_SteamOSType_IHS_SteamOSTypeLinux32: IHS_SteamOSType = -199;
pub const IHS_SteamOSType_IHS_SteamOSTypeLinux35: IHS_SteamOSType = -198;
pub const IHS_SteamOSType_IHS_SteamOSTypeLinux36: IHS_SteamOSType = -197;
pub const IHS_SteamOSType_IHS_SteamOSTypeLinux310: IHS_SteamOSType = -196;
pub const IHS_SteamOSType_IHS_SteamOSTypeLinux316: IHS_SteamOSType = -195;
pub const IHS_SteamOSType_IHS_SteamOSTypeLinux318: IHS_SteamOSType = -194;
pub const IHS_SteamOSType_IHS_SteamOSTypeLinux3x: IHS_SteamOSType = -193;
pub const IHS_SteamOSType_IHS_SteamOSTypeLinux4x: IHS_SteamOSType = -192;
pub const IHS_SteamOSType_IHS_SteamOSTypeLinux41: IHS_SteamOSType = -191;
pub const IHS_SteamOSType_IHS_SteamOSTypeLinux44: IHS_SteamOSType = -190;
pub const IHS_SteamOSType_IHS_SteamOSTypeLinux49: IHS_SteamOSType = -189;
pub const IHS_SteamOSType_IHS_SteamOSTypeLinux414: IHS_SteamOSType = -188;
pub const IHS_SteamOSType_IHS_SteamOSTypeLinux419: IHS_SteamOSType = -187;
pub const IHS_SteamOSType_IHS_SteamOSTypeLinux5x: IHS_SteamOSType = -186;
pub const IHS_SteamOSType_IHS_SteamOSTypeLinux54: IHS_SteamOSType = -185;
pub const IHS_SteamOSType_IHS_SteamOSTypeLinux6x: IHS_SteamOSType = -184;
pub const IHS_SteamOSType_IHS_SteamOSTypeLinux7x: IHS_SteamOSType = -183;
pub const IHS_SteamOSType_IHS_SteamOSTypeLinux510: IHS_SteamOSType = -182;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos: IHS_SteamOSType = -102;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos104: IHS_SteamOSType = -101;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos105: IHS_SteamOSType = -100;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos1058: IHS_SteamOSType = -99;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos106_unused1: IHS_SteamOSType = -98;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos106_unused2: IHS_SteamOSType = -97;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos106_unused3: IHS_SteamOSType = -96;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos106: IHS_SteamOSType = -95;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos1063: IHS_SteamOSType = -94;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos1064_slgu: IHS_SteamOSType = -93;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos1067: IHS_SteamOSType = -92;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos1067_unused: IHS_SteamOSType = -91;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos107: IHS_SteamOSType = -90;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos108: IHS_SteamOSType = -89;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos109: IHS_SteamOSType = -88;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos1010: IHS_SteamOSType = -87;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos1011: IHS_SteamOSType = -86;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos1012: IHS_SteamOSType = -85;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos1013: IHS_SteamOSType = -84;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos1014: IHS_SteamOSType = -83;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos1015: IHS_SteamOSType = -82;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos1016: IHS_SteamOSType = -81;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos11: IHS_SteamOSType = -80;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos111: IHS_SteamOSType = -79;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos1017: IHS_SteamOSType = -78;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos12: IHS_SteamOSType = -77;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos13: IHS_SteamOSType = -75;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos14: IHS_SteamOSType = -74;
pub const IHS_SteamOSType_IHS_SteamOSTypeMacos15: IHS_SteamOSType = -73;
pub const IHS_SteamOSType_IHS_SteamOSTypeUnknown: IHS_SteamOSType = -1;
pub const IHS_SteamOSType_IHS_SteamOSTypeWindows: IHS_SteamOSType = 0;
pub const IHS_SteamOSType_IHS_SteamOSTypeWin311: IHS_SteamOSType = 1;
pub const IHS_SteamOSType_IHS_SteamOSTypeWin95: IHS_SteamOSType = 2;
pub const IHS_SteamOSType_IHS_SteamOSTypeWin98: IHS_SteamOSType = 3;
pub const IHS_SteamOSType_IHS_SteamOSTypeWinME: IHS_SteamOSType = 4;
pub const IHS_SteamOSType_IHS_SteamOSTypeWinNT: IHS_SteamOSType = 5;
pub const IHS_SteamOSType_IHS_SteamOSTypeWin200: IHS_SteamOSType = 6;
pub const IHS_SteamOSType_IHS_SteamOSTypeWinXP: IHS_SteamOSType = 7;
pub const IHS_SteamOSType_IHS_SteamOSTypeWin2003: IHS_SteamOSType = 8;
pub const IHS_SteamOSType_IHS_SteamOSTypeWinVista: IHS_SteamOSType = 9;
pub const IHS_SteamOSType_IHS_SteamOSTypeWin7: IHS_SteamOSType = 10;
pub const IHS_SteamOSType_IHS_SteamOSTypeWin2008: IHS_SteamOSType = 11;
pub const IHS_SteamOSType_IHS_SteamOSTypeWin2012: IHS_SteamOSType = 12;
pub const IHS_SteamOSType_IHS_SteamOSTypeWin8: IHS_SteamOSType = 13;
pub const IHS_SteamOSType_IHS_SteamOSTypeWin81: IHS_SteamOSType = 14;
pub const IHS_SteamOSType_IHS_SteamOSTypeWin2012R2: IHS_SteamOSType = 15;
pub const IHS_SteamOSType_IHS_SteamOSTypeWin10: IHS_SteamOSType = 16;
pub const IHS_SteamOSType_IHS_SteamOSTypeWin2016: IHS_SteamOSType = 17;
pub const IHS_SteamOSType_IHS_SteamOSTypeWin2019: IHS_SteamOSType = 18;
pub const IHS_SteamOSType_IHS_SteamOSTypeWin2022: IHS_SteamOSType = 19;
pub const IHS_SteamOSType_IHS_SteamOSTypeWin11: IHS_SteamOSType = 20;
#[doc = " @see https://github.com/SteamDatabase/SteamTracking/blob/master/Structs/EOSType.h"]
pub type IHS_SteamOSType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IHS_HostInfo {
    pub clientId: u64,
    pub instanceId: u64,
    pub address: IHS_SocketAddress,
    pub hostname: [::std::os::raw::c_char; 64usize],
    pub ostype: IHS_SteamOSType,
    pub universe: IHS_SteamUniverse,
    pub gamesRunning: bool,
}
#[test]
fn bindgen_test_layout_IHS_HostInfo() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_HostInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_HostInfo>(),
        120usize,
        concat!("Size of: ", stringify!(IHS_HostInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_HostInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(IHS_HostInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clientId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HostInfo),
            "::",
            stringify!(clientId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instanceId) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HostInfo),
            "::",
            stringify!(instanceId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HostInfo),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hostname) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HostInfo),
            "::",
            stringify!(hostname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ostype) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HostInfo),
            "::",
            stringify!(ostype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).universe) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HostInfo),
            "::",
            stringify!(universe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gamesRunning) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HostInfo),
            "::",
            stringify!(gamesRunning)
        )
    );
}
#[doc = " Irrecoverable error, and the process should be aborted"]
pub const IHS_LogLevel_IHS_LogLevelFatal: IHS_LogLevel = 0;
#[doc = " Error that should stop session"]
pub const IHS_LogLevel_IHS_LogLevelError: IHS_LogLevel = 1;
#[doc = " Problem that can be self-recovered"]
pub const IHS_LogLevel_IHS_LogLevelWarn: IHS_LogLevel = 2;
#[doc = " Informative message"]
pub const IHS_LogLevel_IHS_LogLevelInfo: IHS_LogLevel = 3;
#[doc = " Informative message"]
pub const IHS_LogLevel_IHS_LogLevelDebug: IHS_LogLevel = 4;
#[doc = " Informative message"]
pub const IHS_LogLevel_IHS_LogLevelVerbose: IHS_LogLevel = 5;
pub type IHS_LogLevel = ::std::os::raw::c_uint;
pub type IHS_LogFunction = ::std::option::Option<
    unsafe extern "C" fn(
        level: IHS_LogLevel,
        tag: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn IHS_Init();
}
extern "C" {
    pub fn IHS_Quit();
}
extern "C" {
    pub fn IHS_LogLevelName(level: IHS_LogLevel) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_Client {
    _unused: [u8; 0],
}
pub const IHS_AuthorizationResult_IHS_AuthorizationSuccess: IHS_AuthorizationResult = 0;
pub const IHS_AuthorizationResult_IHS_AuthorizationDenied: IHS_AuthorizationResult = 1;
pub const IHS_AuthorizationResult_IHS_AuthorizationNotLoggedIn: IHS_AuthorizationResult = 2;
pub const IHS_AuthorizationResult_IHS_AuthorizationOffline: IHS_AuthorizationResult = 3;
pub const IHS_AuthorizationResult_IHS_AuthorizationBusy: IHS_AuthorizationResult = 4;
pub const IHS_AuthorizationResult_IHS_AuthorizationInProgress: IHS_AuthorizationResult = 5;
pub const IHS_AuthorizationResult_IHS_AuthorizationTimedOut: IHS_AuthorizationResult = 6;
pub const IHS_AuthorizationResult_IHS_AuthorizationFailed: IHS_AuthorizationResult = 7;
pub const IHS_AuthorizationResult_IHS_AuthorizationCanceled: IHS_AuthorizationResult = 8;
#[doc = " Corresponding to ERemoteDeviceAuthorizationResult"]
pub type IHS_AuthorizationResult = ::std::os::raw::c_uint;
pub const IHS_StreamingResult_IHS_StreamingSuccess: IHS_StreamingResult = 0;
pub const IHS_StreamingResult_IHS_StreamingUnauthorized: IHS_StreamingResult = 1;
pub const IHS_StreamingResult_IHS_StreamingScreenLocked: IHS_StreamingResult = 2;
pub const IHS_StreamingResult_IHS_StreamingFailed: IHS_StreamingResult = 3;
pub const IHS_StreamingResult_IHS_StreamingBusy: IHS_StreamingResult = 4;
pub const IHS_StreamingResult_IHS_StreamingInProgress: IHS_StreamingResult = 5;
pub const IHS_StreamingResult_IHS_StreamingCanceled: IHS_StreamingResult = 6;
pub const IHS_StreamingResult_IHS_StreamingDriversNotInstalled: IHS_StreamingResult = 7;
pub const IHS_StreamingResult_IHS_StreamingDisabled: IHS_StreamingResult = 8;
pub const IHS_StreamingResult_IHS_StreamingBroadcastingActive: IHS_StreamingResult = 9;
pub const IHS_StreamingResult_IHS_StreamingVRActive: IHS_StreamingResult = 10;
pub const IHS_StreamingResult_IHS_StreamingPINRequired: IHS_StreamingResult = 11;
pub const IHS_StreamingResult_IHS_StreamingTransportUnavailable: IHS_StreamingResult = 12;
pub const IHS_StreamingResult_IHS_StreamingInvisible: IHS_StreamingResult = 13;
pub const IHS_StreamingResult_IHS_StreamingGameLaunchFailed: IHS_StreamingResult = 14;
pub const IHS_StreamingResult_IHS_StreamingTimeout: IHS_StreamingResult = -1;
pub type IHS_StreamingResult = ::std::os::raw::c_int;
pub const IHS_StreamInterface_IHS_StreamInterfaceDefault: IHS_StreamInterface = 0;
pub const IHS_StreamInterface_IHS_StreamInterfaceRecentGames: IHS_StreamInterface = 1;
pub const IHS_StreamInterface_IHS_StreamInterfaceBigPicture: IHS_StreamInterface = 2;
pub const IHS_StreamInterface_IHS_StreamInterfaceDesktop: IHS_StreamInterface = 3;
pub type IHS_StreamInterface = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_StreamingRequest {
    pub pin: [::std::os::raw::c_char; 16usize],
    pub streamingEnable: IHS_StreamingRequest__bindgen_ty_1,
    pub maxResolution: IHS_StreamingRequest__bindgen_ty_2,
    pub audioChannelCount: i32,
    pub streamingInterface: IHS_StreamInterface,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_StreamingRequest__bindgen_ty_1 {
    pub video: bool,
    pub audio: bool,
    pub input: bool,
}
#[test]
fn bindgen_test_layout_IHS_StreamingRequest__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_StreamingRequest__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_StreamingRequest__bindgen_ty_1>(),
        3usize,
        concat!("Size of: ", stringify!(IHS_StreamingRequest__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_StreamingRequest__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(IHS_StreamingRequest__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).video) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamingRequest__bindgen_ty_1),
            "::",
            stringify!(video)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).audio) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamingRequest__bindgen_ty_1),
            "::",
            stringify!(audio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamingRequest__bindgen_ty_1),
            "::",
            stringify!(input)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_StreamingRequest__bindgen_ty_2 {
    pub x: i32,
    pub y: i32,
}
#[test]
fn bindgen_test_layout_IHS_StreamingRequest__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_StreamingRequest__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_StreamingRequest__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(IHS_StreamingRequest__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_StreamingRequest__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(IHS_StreamingRequest__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamingRequest__bindgen_ty_2),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamingRequest__bindgen_ty_2),
            "::",
            stringify!(y)
        )
    );
}
#[test]
fn bindgen_test_layout_IHS_StreamingRequest() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_StreamingRequest> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_StreamingRequest>(),
        36usize,
        concat!("Size of: ", stringify!(IHS_StreamingRequest))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_StreamingRequest>(),
        4usize,
        concat!("Alignment of ", stringify!(IHS_StreamingRequest))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pin) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamingRequest),
            "::",
            stringify!(pin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).streamingEnable) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamingRequest),
            "::",
            stringify!(streamingEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxResolution) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamingRequest),
            "::",
            stringify!(maxResolution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).audioChannelCount) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamingRequest),
            "::",
            stringify!(audioChannelCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).streamingInterface) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamingRequest),
            "::",
            stringify!(streamingInterface)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_ClientDiscoveryCallbacks {
    pub discovered: ::std::option::Option<
        unsafe extern "C" fn(
            client: *mut IHS_Client,
            host: *const IHS_HostInfo,
            context: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout_IHS_ClientDiscoveryCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_ClientDiscoveryCallbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_ClientDiscoveryCallbacks>(),
        8usize,
        concat!("Size of: ", stringify!(IHS_ClientDiscoveryCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_ClientDiscoveryCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(IHS_ClientDiscoveryCallbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).discovered) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_ClientDiscoveryCallbacks),
            "::",
            stringify!(discovered)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_ClientAuthorizationCallbacks {
    pub progress: ::std::option::Option<
        unsafe extern "C" fn(
            client: *mut IHS_Client,
            host: *const IHS_HostInfo,
            context: *mut ::std::os::raw::c_void,
        ),
    >,
    pub success: ::std::option::Option<
        unsafe extern "C" fn(
            client: *mut IHS_Client,
            host: *const IHS_HostInfo,
            steamId: u64,
            context: *mut ::std::os::raw::c_void,
        ),
    >,
    pub failed: ::std::option::Option<
        unsafe extern "C" fn(
            client: *mut IHS_Client,
            host: *const IHS_HostInfo,
            result: IHS_AuthorizationResult,
            context: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout_IHS_ClientAuthorizationCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_ClientAuthorizationCallbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_ClientAuthorizationCallbacks>(),
        24usize,
        concat!("Size of: ", stringify!(IHS_ClientAuthorizationCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_ClientAuthorizationCallbacks>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IHS_ClientAuthorizationCallbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_ClientAuthorizationCallbacks),
            "::",
            stringify!(progress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).success) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_ClientAuthorizationCallbacks),
            "::",
            stringify!(success)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).failed) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_ClientAuthorizationCallbacks),
            "::",
            stringify!(failed)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_ClientStreamingCallbacks {
    pub progress: ::std::option::Option<
        unsafe extern "C" fn(
            client: *mut IHS_Client,
            host: *const IHS_HostInfo,
            context: *mut ::std::os::raw::c_void,
        ),
    >,
    pub success: ::std::option::Option<
        unsafe extern "C" fn(
            client: *mut IHS_Client,
            host: *const IHS_HostInfo,
            address: *const IHS_SocketAddress,
            sessionKey: *const u8,
            sessionKeyLen: usize,
            context: *mut ::std::os::raw::c_void,
        ),
    >,
    pub failed: ::std::option::Option<
        unsafe extern "C" fn(
            client: *mut IHS_Client,
            host: *const IHS_HostInfo,
            result: IHS_StreamingResult,
            context: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout_IHS_ClientStreamingCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_ClientStreamingCallbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_ClientStreamingCallbacks>(),
        24usize,
        concat!("Size of: ", stringify!(IHS_ClientStreamingCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_ClientStreamingCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(IHS_ClientStreamingCallbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_ClientStreamingCallbacks),
            "::",
            stringify!(progress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).success) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_ClientStreamingCallbacks),
            "::",
            stringify!(success)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).failed) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_ClientStreamingCallbacks),
            "::",
            stringify!(failed)
        )
    );
}
extern "C" {
    pub fn IHS_ClientCreate(config: *const IHS_ClientConfig) -> *mut IHS_Client;
}
extern "C" {
    pub fn IHS_ClientSetLogFunction(client: *mut IHS_Client, logFunction: IHS_LogFunction);
}
extern "C" {
    pub fn IHS_ClientStop(client: *mut IHS_Client);
}
extern "C" {
    pub fn IHS_ClientThreadedJoin(client: *mut IHS_Client);
}
extern "C" {
    pub fn IHS_ClientDestroy(client: *mut IHS_Client);
}
extern "C" {
    pub fn IHS_ClientSetDiscoveryCallbacks(
        client: *mut IHS_Client,
        callbacks: *const IHS_ClientDiscoveryCallbacks,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn IHS_ClientSetAuthorizationCallbacks(
        client: *mut IHS_Client,
        callbacks: *const IHS_ClientAuthorizationCallbacks,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn IHS_ClientSetStreamingCallbacks(
        client: *mut IHS_Client,
        callbacks: *const IHS_ClientStreamingCallbacks,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn IHS_ClientError(client: *mut IHS_Client) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Start discovery\n @param client Client instance\n @param interval Milliseconds between each discovery request. 0 for single-shot\n @return"]
    pub fn IHS_ClientStartDiscovery(client: *mut IHS_Client, interval: u32) -> bool;
}
extern "C" {
    pub fn IHS_ClientStopDiscovery(client: *mut IHS_Client) -> bool;
}
extern "C" {
    #[doc = " Request authorization\n @param client Client instance\n @param host Host information\n @param pin PIN code"]
    pub fn IHS_ClientAuthorizationRequest(
        client: *mut IHS_Client,
        host: *const IHS_HostInfo,
        pin: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn IHS_ClientAuthorizationCancel(client: *mut IHS_Client) -> bool;
}
extern "C" {
    pub fn IHS_ClientStreamingRequest(
        client: *mut IHS_Client,
        host: *const IHS_HostInfo,
        request: *const IHS_StreamingRequest,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_Buffer {
    #[doc = " Data pointer"]
    pub data: *mut u8,
    #[doc = " Allocation size of the data pointer"]
    pub capacity: usize,
    #[doc = " Length before beginning of data"]
    pub offset: usize,
    pub size: usize,
    #[doc = " Length after data size"]
    pub suffix: usize,
    pub initialCapacity: usize,
    pub maxCapacity: usize,
}
#[test]
fn bindgen_test_layout_IHS_Buffer() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_Buffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_Buffer>(),
        56usize,
        concat!("Size of: ", stringify!(IHS_Buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_Buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(IHS_Buffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_Buffer),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_Buffer),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_Buffer),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_Buffer),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suffix) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_Buffer),
            "::",
            stringify!(suffix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialCapacity) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_Buffer),
            "::",
            stringify!(initialCapacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxCapacity) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_Buffer),
            "::",
            stringify!(maxCapacity)
        )
    );
}
extern "C" {
    pub fn IHS_BufferPointer(buffer: *const IHS_Buffer) -> *mut u8;
}
extern "C" {
    pub fn IHS_BufferPointerAt(buffer: *const IHS_Buffer, position: usize) -> *mut u8;
}
extern "C" {
    pub fn IHS_BufferReadMem(buffer: *const IHS_Buffer, position: usize, dest: *mut u8, len: usize);
}
extern "C" {
    #[doc = " Set internal data pointer to NULL, so it will not be freed or accessed anymore\n @param buffer Buffer to release ownership"]
    pub fn IHS_BufferReleaseOwnership(buffer: *mut IHS_Buffer);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_Session {
    _unused: [u8; 0],
}
pub const IHS_StreamAudioCodec_IHS_StreamAudioCodecNone: IHS_StreamAudioCodec = 0;
pub const IHS_StreamAudioCodec_IHS_StreamAudioCodecRaw: IHS_StreamAudioCodec = 1;
pub const IHS_StreamAudioCodec_IHS_StreamAudioCodecVorbis: IHS_StreamAudioCodec = 2;
pub const IHS_StreamAudioCodec_IHS_StreamAudioCodecOpus: IHS_StreamAudioCodec = 3;
pub const IHS_StreamAudioCodec_IHS_StreamAudioCodecMP3: IHS_StreamAudioCodec = 4;
pub const IHS_StreamAudioCodec_IHS_StreamAudioCodecAAC: IHS_StreamAudioCodec = 5;
pub type IHS_StreamAudioCodec = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_StreamAudioConfig {
    pub channels: u32,
    pub frequency: u32,
    pub codec: IHS_StreamAudioCodec,
    pub codecData: *mut u8,
    pub codecDataLen: usize,
}
#[test]
fn bindgen_test_layout_IHS_StreamAudioConfig() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_StreamAudioConfig> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_StreamAudioConfig>(),
        32usize,
        concat!("Size of: ", stringify!(IHS_StreamAudioConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_StreamAudioConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(IHS_StreamAudioConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamAudioConfig),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frequency) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamAudioConfig),
            "::",
            stringify!(frequency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).codec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamAudioConfig),
            "::",
            stringify!(codec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).codecData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamAudioConfig),
            "::",
            stringify!(codecData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).codecDataLen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamAudioConfig),
            "::",
            stringify!(codecDataLen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_StreamAudioCallbacks {
    pub start: ::std::option::Option<
        unsafe extern "C" fn(
            session: *mut IHS_Session,
            config: *const IHS_StreamAudioConfig,
            context: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub submit: ::std::option::Option<
        unsafe extern "C" fn(
            session: *mut IHS_Session,
            data: *mut IHS_Buffer,
            context: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub stop: ::std::option::Option<
        unsafe extern "C" fn(session: *mut IHS_Session, context: *mut ::std::os::raw::c_void),
    >,
}
#[test]
fn bindgen_test_layout_IHS_StreamAudioCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_StreamAudioCallbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_StreamAudioCallbacks>(),
        24usize,
        concat!("Size of: ", stringify!(IHS_StreamAudioCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_StreamAudioCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(IHS_StreamAudioCallbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamAudioCallbacks),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).submit) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamAudioCallbacks),
            "::",
            stringify!(submit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamAudioCallbacks),
            "::",
            stringify!(stop)
        )
    );
}
pub const IHS_StreamVideoCodec_IHS_StreamVideoCodecNone: IHS_StreamVideoCodec = 0;
pub const IHS_StreamVideoCodec_IHS_StreamVideoCodecRaw: IHS_StreamVideoCodec = 1;
pub const IHS_StreamVideoCodec_IHS_StreamVideoCodecVP8: IHS_StreamVideoCodec = 2;
pub const IHS_StreamVideoCodec_IHS_StreamVideoCodecVP9: IHS_StreamVideoCodec = 3;
pub const IHS_StreamVideoCodec_IHS_StreamVideoCodecH264: IHS_StreamVideoCodec = 4;
pub const IHS_StreamVideoCodec_IHS_StreamVideoCodecHEVC: IHS_StreamVideoCodec = 5;
pub const IHS_StreamVideoCodec_IHS_StreamVideoCodecORBX1: IHS_StreamVideoCodec = 6;
pub const IHS_StreamVideoCodec_IHS_StreamVideoCodecORBX2: IHS_StreamVideoCodec = 7;
pub type IHS_StreamVideoCodec = ::std::os::raw::c_uint;
pub const IHS_StreamVideoFrameFlag_IHS_StreamVideoFrameNone: IHS_StreamVideoFrameFlag = 0;
pub const IHS_StreamVideoFrameFlag_IHS_StreamVideoFrameKeyFrame: IHS_StreamVideoFrameFlag = 1;
pub type IHS_StreamVideoFrameFlag = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_StreamVideoConfig {
    pub width: u32,
    pub height: u32,
    pub codec: IHS_StreamVideoCodec,
    pub codecData: *mut u8,
    pub codecDataLen: usize,
}
#[test]
fn bindgen_test_layout_IHS_StreamVideoConfig() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_StreamVideoConfig> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_StreamVideoConfig>(),
        32usize,
        concat!("Size of: ", stringify!(IHS_StreamVideoConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_StreamVideoConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(IHS_StreamVideoConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamVideoConfig),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamVideoConfig),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).codec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamVideoConfig),
            "::",
            stringify!(codec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).codecData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamVideoConfig),
            "::",
            stringify!(codecData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).codecDataLen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamVideoConfig),
            "::",
            stringify!(codecDataLen)
        )
    );
}
pub const IHS_StreamVideoSubmitResult_IHS_StreamVideoSubmitOK: IHS_StreamVideoSubmitResult = 0;
pub const IHS_StreamVideoSubmitResult_IHS_StreamVideoSubmitReportLost: IHS_StreamVideoSubmitResult =
    1;
pub const IHS_StreamVideoSubmitResult_IHS_StreamVideoSubmitError: IHS_StreamVideoSubmitResult = -1;
pub type IHS_StreamVideoSubmitResult = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_StreamVideoCallbacks {
    pub start: ::std::option::Option<
        unsafe extern "C" fn(
            session: *mut IHS_Session,
            config: *const IHS_StreamVideoConfig,
            context: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub submit: ::std::option::Option<
        unsafe extern "C" fn(
            session: *mut IHS_Session,
            data: *mut IHS_Buffer,
            flags: IHS_StreamVideoFrameFlag,
            context: *mut ::std::os::raw::c_void,
        ) -> IHS_StreamVideoSubmitResult,
    >,
    pub stop: ::std::option::Option<
        unsafe extern "C" fn(session: *mut IHS_Session, context: *mut ::std::os::raw::c_void),
    >,
    pub setCaptureSize: ::std::option::Option<
        unsafe extern "C" fn(
            session: *mut IHS_Session,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            context: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_IHS_StreamVideoCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_StreamVideoCallbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_StreamVideoCallbacks>(),
        32usize,
        concat!("Size of: ", stringify!(IHS_StreamVideoCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_StreamVideoCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(IHS_StreamVideoCallbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamVideoCallbacks),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).submit) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamVideoCallbacks),
            "::",
            stringify!(submit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamVideoCallbacks),
            "::",
            stringify!(stop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setCaptureSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamVideoCallbacks),
            "::",
            stringify!(setCaptureSize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_StreamInputCursorImage {
    pub cursorId: u64,
    pub width: i32,
    pub height: i32,
    pub hotX: i32,
    pub hotY: i32,
    pub image: *const u8,
    pub imageLen: usize,
}
#[test]
fn bindgen_test_layout_IHS_StreamInputCursorImage() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_StreamInputCursorImage> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_StreamInputCursorImage>(),
        40usize,
        concat!("Size of: ", stringify!(IHS_StreamInputCursorImage))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_StreamInputCursorImage>(),
        8usize,
        concat!("Alignment of ", stringify!(IHS_StreamInputCursorImage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cursorId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamInputCursorImage),
            "::",
            stringify!(cursorId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamInputCursorImage),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamInputCursorImage),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hotX) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamInputCursorImage),
            "::",
            stringify!(hotX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hotY) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamInputCursorImage),
            "::",
            stringify!(hotY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamInputCursorImage),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageLen) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamInputCursorImage),
            "::",
            stringify!(imageLen)
        )
    );
}
pub const IHS_StreamInputMouseButton_IHS_MOUSE_BUTTON_LEFT: IHS_StreamInputMouseButton = 1;
pub const IHS_StreamInputMouseButton_IHS_MOUSE_BUTTON_RIGHT: IHS_StreamInputMouseButton = 2;
pub const IHS_StreamInputMouseButton_IHS_MOUSE_BUTTON_MIDDLE: IHS_StreamInputMouseButton = 16;
pub const IHS_StreamInputMouseButton_IHS_MOUSE_BUTTON_X1: IHS_StreamInputMouseButton = 32;
pub const IHS_StreamInputMouseButton_IHS_MOUSE_BUTTON_X2: IHS_StreamInputMouseButton = 64;
pub type IHS_StreamInputMouseButton = ::std::os::raw::c_uint;
pub const IHS_StreamInputMouseWheelDirection_IHS_MOUSE_WHEEL_UP:
    IHS_StreamInputMouseWheelDirection = 1;
pub const IHS_StreamInputMouseWheelDirection_IHS_MOUSE_WHEEL_DOWN:
    IHS_StreamInputMouseWheelDirection = 2;
pub const IHS_StreamInputMouseWheelDirection_IHS_MOUSE_WHEEL_LEFT:
    IHS_StreamInputMouseWheelDirection = 3;
pub const IHS_StreamInputMouseWheelDirection_IHS_MOUSE_WHEEL_RIGHT:
    IHS_StreamInputMouseWheelDirection = 4;
pub type IHS_StreamInputMouseWheelDirection = ::std::os::raw::c_uint;
pub const IHS_StreamInputControllerType_IHS_CONTROLLER_TYPE_NONE: IHS_StreamInputControllerType = 0;
pub const IHS_StreamInputControllerType_IHS_CONTROLLER_TYPE_GENERIC: IHS_StreamInputControllerType =
    30;
pub const IHS_StreamInputControllerType_IHS_CONTROLLER_TYPE_XBOX_360:
    IHS_StreamInputControllerType = 31;
pub const IHS_StreamInputControllerType_IHS_CONTROLLER_TYPE_XBOX_ONE:
    IHS_StreamInputControllerType = 32;
pub const IHS_StreamInputControllerType_IHS_CONTROLLER_TYPE_PS3: IHS_StreamInputControllerType = 33;
pub const IHS_StreamInputControllerType_IHS_CONTROLLER_TYPE_PS4: IHS_StreamInputControllerType = 34;
pub const IHS_StreamInputControllerType_IHS_CONTROLLER_TYPE_SWITCH: IHS_StreamInputControllerType =
    38;
pub const IHS_StreamInputControllerType_IHS_CONTROLLER_TYPE_SWITCH_GEN:
    IHS_StreamInputControllerType = 42;
pub const IHS_StreamInputControllerType_IHS_CONTROLLER_TYPE_PS5: IHS_StreamInputControllerType = 45;
pub type IHS_StreamInputControllerType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_HIDPeripheralInfo {
    pub vid: u16,
    pub pid: u16,
    pub xinput: bool,
}
#[test]
fn bindgen_test_layout_IHS_HIDPeripheralInfo() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_HIDPeripheralInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_HIDPeripheralInfo>(),
        6usize,
        concat!("Size of: ", stringify!(IHS_HIDPeripheralInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_HIDPeripheralInfo>(),
        2usize,
        concat!("Alignment of ", stringify!(IHS_HIDPeripheralInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDPeripheralInfo),
            "::",
            stringify!(vid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDPeripheralInfo),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xinput) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDPeripheralInfo),
            "::",
            stringify!(xinput)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_StreamInputCallbacks {
    #[doc = " @param session\n @param cursorId\n @param context\n @return `true` if cursor image exists, `false` will cause library to request for the icon"]
    pub setCursor: ::std::option::Option<
        unsafe extern "C" fn(
            session: *mut IHS_Session,
            cursorId: u64,
            context: *mut ::std::os::raw::c_void,
        ) -> bool,
    >,
    pub deleteCursor: ::std::option::Option<
        unsafe extern "C" fn(
            session: *mut IHS_Session,
            cursorId: u64,
            context: *mut ::std::os::raw::c_void,
        ) -> bool,
    >,
    pub cursorImage: ::std::option::Option<
        unsafe extern "C" fn(
            session: *mut IHS_Session,
            image: *const IHS_StreamInputCursorImage,
            context: *mut ::std::os::raw::c_void,
        ),
    >,
    pub showCursor: ::std::option::Option<
        unsafe extern "C" fn(
            session: *mut IHS_Session,
            x: f32,
            y: f32,
            context: *mut ::std::os::raw::c_void,
        ),
    >,
    pub hideCursor: ::std::option::Option<
        unsafe extern "C" fn(session: *mut IHS_Session, context: *mut ::std::os::raw::c_void),
    >,
}
#[test]
fn bindgen_test_layout_IHS_StreamInputCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_StreamInputCallbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_StreamInputCallbacks>(),
        40usize,
        concat!("Size of: ", stringify!(IHS_StreamInputCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_StreamInputCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(IHS_StreamInputCallbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setCursor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamInputCallbacks),
            "::",
            stringify!(setCursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deleteCursor) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamInputCallbacks),
            "::",
            stringify!(deleteCursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cursorImage) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamInputCallbacks),
            "::",
            stringify!(cursorImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).showCursor) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamInputCallbacks),
            "::",
            stringify!(showCursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hideCursor) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamInputCallbacks),
            "::",
            stringify!(hideCursor)
        )
    );
}
extern "C" {
    pub fn IHS_SessionSendMousePosition(session: *mut IHS_Session, x: f32, y: f32) -> bool;
}
extern "C" {
    pub fn IHS_SessionSendMouseMovement(
        session: *mut IHS_Session,
        dx: ::std::os::raw::c_int,
        dy: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn IHS_SessionSendMouseDown(
        session: *mut IHS_Session,
        button: IHS_StreamInputMouseButton,
    ) -> bool;
}
extern "C" {
    pub fn IHS_SessionSendMouseUp(
        session: *mut IHS_Session,
        button: IHS_StreamInputMouseButton,
    ) -> bool;
}
extern "C" {
    pub fn IHS_SessionSendMouseWheel(
        session: *mut IHS_Session,
        direction: IHS_StreamInputMouseWheelDirection,
    ) -> bool;
}
extern "C" {
    pub fn IHS_SessionSendKeyDown(session: *mut IHS_Session, scancode: u32) -> bool;
}
extern "C" {
    pub fn IHS_SessionSendKeyUp(session: *mut IHS_Session, scancode: u32) -> bool;
}
extern "C" {
    pub fn IHS_SessionSendTouchDown(
        session: *mut IHS_Session,
        fingerId: u64,
        x: f32,
        y: f32,
    ) -> bool;
}
extern "C" {
    pub fn IHS_SessionSendTouchUp(session: *mut IHS_Session, fingerId: u64, x: f32, y: f32)
        -> bool;
}
extern "C" {
    pub fn IHS_SessionSendTouchMotion(
        session: *mut IHS_Session,
        fingerId: u64,
        x: f32,
        y: f32,
    ) -> bool;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type wint_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wch) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wchb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
pub type mbstate_t = __mbstate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    _unused: [u8; 0],
}
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    const UNINIT: ::std::mem::MaybeUninit<__locale_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__locales) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_b) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_tolower) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_toupper) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__names) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    _unused: [u8; 0],
}
extern "C" {
    pub fn wcscpy(__dest: *mut wchar_t, __src: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncpy(__dest: *mut wchar_t, __src: *const wchar_t, __n: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscat(__dest: *mut wchar_t, __src: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncat(__dest: *mut wchar_t, __src: *const wchar_t, __n: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscmp(
        __s1: *const ::std::os::raw::c_int,
        __s2: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncmp(
        __s1: *const ::std::os::raw::c_int,
        __s2: *const ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscasecmp(__s1: *const wchar_t, __s2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp(
        __s1: *const wchar_t,
        __s2: *const wchar_t,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscasecmp_l(
        __s1: *const wchar_t,
        __s2: *const wchar_t,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp_l(
        __s1: *const wchar_t,
        __s2: *const wchar_t,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscoll(__s1: *const wchar_t, __s2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm(__s1: *mut wchar_t, __s2: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn wcscoll_l(
        __s1: *const wchar_t,
        __s2: *const wchar_t,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm_l(
        __s1: *mut wchar_t,
        __s2: *const wchar_t,
        __n: usize,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsdup(__s: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcschr(
        __wcs: *const ::std::os::raw::c_int,
        __wc: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsrchr(__wcs: *const wchar_t, __wc: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(__wcs: *const wchar_t, __reject: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcsspn(__wcs: *const wchar_t, __accept: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcspbrk(__wcs: *const wchar_t, __accept: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsstr(__haystack: *const wchar_t, __needle: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstok(
        __s: *mut wchar_t,
        __delim: *const wchar_t,
        __ptr: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslen(__s: *const ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcsnlen(__s: *const wchar_t, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn wmemchr(
        __s: *const ::std::os::raw::c_int,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcmp(
        __s1: *const ::std::os::raw::c_int,
        __s2: *const ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcpy(
        __s1: *mut ::std::os::raw::c_int,
        __s2: *const ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemmove(
        __s1: *mut ::std::os::raw::c_int,
        __s2: *const ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemset(__s: *mut wchar_t, __c: wchar_t, __n: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn btowc(__c: ::std::os::raw::c_int) -> wint_t;
}
extern "C" {
    pub fn wctob(__c: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbsinit(__ps: *const mbstate_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbrtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
        __p: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcrtomb(__s: *mut ::std::os::raw::c_char, __wc: wchar_t, __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn __mbrlen(__s: *const ::std::os::raw::c_char, __n: usize, __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbrlen(__s: *const ::std::os::raw::c_char, __n: usize, __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbsrtowcs(
        __dst: *mut wchar_t,
        __src: *mut *const ::std::os::raw::c_char,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsrtombs(
        __dst: *mut ::std::os::raw::c_char,
        __src: *mut *const wchar_t,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn mbsnrtowcs(
        __dst: *mut wchar_t,
        __src: *mut *const ::std::os::raw::c_char,
        __nmc: usize,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsnrtombs(
        __dst: *mut ::std::os::raw::c_char,
        __src: *mut *const wchar_t,
        __nwc: usize,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcstod(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn wcstof(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn wcstold(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t) -> u128;
}
extern "C" {
    pub fn wcstol(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoll(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcpcpy(__dest: *mut wchar_t, __src: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcpncpy(__dest: *mut wchar_t, __src: *const wchar_t, __n: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn open_wmemstream(__bufloc: *mut *mut wchar_t, __sizeloc: *mut usize) -> *mut __FILE;
}
extern "C" {
    pub fn fwide(__fp: *mut __FILE, __mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwprintf(__stream: *mut __FILE, __format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wprintf(__format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swprintf(
        __s: *mut wchar_t,
        __n: usize,
        __format: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwprintf(
        __s: *mut __FILE,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintf(__format: *const wchar_t, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswprintf(
        __s: *mut wchar_t,
        __n: usize,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwscanf(__stream: *mut __FILE, __format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanf(__format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swscanf(__s: *const wchar_t, __format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fwscanf"]
    pub fn fwscanf1(__stream: *mut __FILE, __format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_wscanf"]
    pub fn wscanf1(__format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_swscanf"]
    pub fn swscanf1(__s: *const wchar_t, __format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwscanf(
        __s: *mut __FILE,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanf(__format: *const wchar_t, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswscanf(
        __s: *const wchar_t,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfwscanf"]
    pub fn vfwscanf1(
        __s: *mut __FILE,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vwscanf"]
    pub fn vwscanf1(__format: *const wchar_t, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vswscanf"]
    pub fn vswscanf1(
        __s: *const wchar_t,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetwc(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwc(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(__wc: wchar_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwc(__wc: wchar_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(__wc: wchar_t) -> wint_t;
}
extern "C" {
    pub fn fgetws(
        __ws: *mut wchar_t,
        __n: ::std::os::raw::c_int,
        __stream: *mut __FILE,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(__ws: *const wchar_t, __stream: *mut __FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(__wc: wint_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn wcsftime(
        __s: *mut wchar_t,
        __maxsize: usize,
        __format: *const wchar_t,
        __tp: *const tm,
    ) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_EnumerationClass {
    pub alloc: ::std::option::Option<
        unsafe extern "C" fn(
            cls: *const IHS_EnumerationClass,
            arg: *mut ::std::os::raw::c_void,
        ) -> *mut IHS_Enumeration,
    >,
    pub free: ::std::option::Option<unsafe extern "C" fn(enumeration: *mut IHS_Enumeration)>,
    pub count:
        ::std::option::Option<unsafe extern "C" fn(enumeration: *const IHS_Enumeration) -> usize>,
    pub reset: ::std::option::Option<unsafe extern "C" fn(enumeration: *mut IHS_Enumeration)>,
    pub ended:
        ::std::option::Option<unsafe extern "C" fn(enumeration: *const IHS_Enumeration) -> bool>,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(enumeration: *const IHS_Enumeration) -> *mut ::std::os::raw::c_void,
    >,
    pub next: ::std::option::Option<
        unsafe extern "C" fn(enumeration: *mut IHS_Enumeration) -> *mut ::std::os::raw::c_void,
    >,
}
#[test]
fn bindgen_test_layout_IHS_EnumerationClass() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_EnumerationClass> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_EnumerationClass>(),
        56usize,
        concat!("Size of: ", stringify!(IHS_EnumerationClass))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_EnumerationClass>(),
        8usize,
        concat!("Alignment of ", stringify!(IHS_EnumerationClass))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_EnumerationClass),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_EnumerationClass),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_EnumerationClass),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_EnumerationClass),
            "::",
            stringify!(reset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ended) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_EnumerationClass),
            "::",
            stringify!(ended)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_EnumerationClass),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_EnumerationClass),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_Enumeration {
    pub cls: *const IHS_EnumerationClass,
}
#[test]
fn bindgen_test_layout_IHS_Enumeration() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_Enumeration> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_Enumeration>(),
        8usize,
        concat!("Size of: ", stringify!(IHS_Enumeration))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_Enumeration>(),
        8usize,
        concat!("Alignment of ", stringify!(IHS_Enumeration))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cls) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_Enumeration),
            "::",
            stringify!(cls)
        )
    );
}
pub type IHS_EnumerationLinkedListNext = ::std::option::Option<
    unsafe extern "C" fn(cur: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
pub type IHS_EnumerationFreeUnderlying =
    ::std::option::Option<unsafe extern "C" fn(p: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn IHS_EnumerationCreate(
        cls: *const IHS_EnumerationClass,
        arg: *mut ::std::os::raw::c_void,
    ) -> *mut IHS_Enumeration;
}
extern "C" {
    pub fn IHS_EnumerationLinkedListCreate(
        ll: *mut ::std::os::raw::c_void,
        next: IHS_EnumerationLinkedListNext,
        free: IHS_EnumerationFreeUnderlying,
    ) -> *mut IHS_Enumeration;
}
extern "C" {
    pub fn IHS_EnumerationArrayCreate(
        array: *mut ::std::os::raw::c_void,
        itemSize: usize,
        count: usize,
        free: IHS_EnumerationFreeUnderlying,
    ) -> *mut IHS_Enumeration;
}
extern "C" {
    pub fn IHS_EnumerationEmptyCreate() -> *mut IHS_Enumeration;
}
extern "C" {
    pub fn IHS_EnumerationCount(enumeration: *const IHS_Enumeration) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_HIDManager {
    _unused: [u8; 0],
}
pub const IHS_HIDDeviceCaps_IHS_HID_CAP_ABXY: IHS_HIDDeviceCaps = 1;
pub const IHS_HIDDeviceCaps_IHS_HID_CAP_DPAD: IHS_HIDDeviceCaps = 2;
pub const IHS_HIDDeviceCaps_IHS_HID_CAP_LSTICK: IHS_HIDDeviceCaps = 4;
pub const IHS_HIDDeviceCaps_IHS_HID_CAP_RSTICK: IHS_HIDDeviceCaps = 8;
pub const IHS_HIDDeviceCaps_IHS_HID_CAP_STICKBTNS: IHS_HIDDeviceCaps = 16;
pub const IHS_HIDDeviceCaps_IHS_HID_CAP_SHOULDERS: IHS_HIDDeviceCaps = 32;
pub const IHS_HIDDeviceCaps_IHS_HID_CAP_TRIGGERS: IHS_HIDDeviceCaps = 64;
pub const IHS_HIDDeviceCaps_IHS_HID_CAP_BACK: IHS_HIDDeviceCaps = 128;
pub const IHS_HIDDeviceCaps_IHS_HID_CAP_START: IHS_HIDDeviceCaps = 256;
pub const IHS_HIDDeviceCaps_IHS_HID_CAP_GUIDE: IHS_HIDDeviceCaps = 512;
pub const IHS_HIDDeviceCaps_IHS_HID_CAP_PADDLE_1: IHS_HIDDeviceCaps = 1024;
pub const IHS_HIDDeviceCaps_IHS_HID_CAP_UNK_1: IHS_HIDDeviceCaps = 2048;
pub const IHS_HIDDeviceCaps_IHS_HID_CAP_UNK_2: IHS_HIDDeviceCaps = 4096;
pub const IHS_HIDDeviceCaps_IHS_HID_CAP_XINPUT_OR_HIDAPI: IHS_HIDDeviceCaps = 16384;
pub const IHS_HIDDeviceCaps_IHS_HID_CAP_UNK_3: IHS_HIDDeviceCaps = 65536;
pub const IHS_HIDDeviceCaps_IHS_HID_CAP_UNK_4: IHS_HIDDeviceCaps = 131072;
pub const IHS_HIDDeviceCaps_IHS_HID_CAP_UNK_5: IHS_HIDDeviceCaps = 262144;
pub const IHS_HIDDeviceCaps_IHS_HID_CAP_NOT_XINPUT_HIDAPI: IHS_HIDDeviceCaps = 1048576;
pub const IHS_HIDDeviceCaps_IHS_HID_CAP_PADDLE_3: IHS_HIDDeviceCaps = 4194304;
pub const IHS_HIDDeviceCaps_IHS_HID_CAP_MISC_1: IHS_HIDDeviceCaps = 8388608;
pub const IHS_HIDDeviceCaps_IHS_HID_CAP_UNK_6: IHS_HIDDeviceCaps = 16777216;
pub const IHS_HIDDeviceCaps_IHS_HID_CAP_UNK_7: IHS_HIDDeviceCaps = 33554432;
pub type IHS_HIDDeviceCaps = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_HIDDeviceInfo {
    #[doc = " Platform-specific device path"]
    pub path: *const ::std::os::raw::c_char,
    pub product_string: *const ::std::os::raw::c_char,
    pub serial_number: *const ::std::os::raw::c_char,
    #[doc = " Device Vendor ID"]
    pub vendor_id: u16,
    #[doc = " Device Product ID"]
    pub product_id: u16,
    pub product_version: u16,
}
#[test]
fn bindgen_test_layout_IHS_HIDDeviceInfo() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_HIDDeviceInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_HIDDeviceInfo>(),
        32usize,
        concat!("Size of: ", stringify!(IHS_HIDDeviceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_HIDDeviceInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(IHS_HIDDeviceInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDDeviceInfo),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).product_string) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDDeviceInfo),
            "::",
            stringify!(product_string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serial_number) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDDeviceInfo),
            "::",
            stringify!(serial_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendor_id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDDeviceInfo),
            "::",
            stringify!(vendor_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).product_id) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDDeviceInfo),
            "::",
            stringify!(product_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).product_version) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDDeviceInfo),
            "::",
            stringify!(product_version)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_HIDManagedDevice {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_HIDDevice {
    pub cls: *const IHS_HIDDeviceClass,
    #[doc = " Opaque pointer to report holder"]
    pub managed: *mut IHS_HIDManagedDevice,
}
#[test]
fn bindgen_test_layout_IHS_HIDDevice() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_HIDDevice> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_HIDDevice>(),
        16usize,
        concat!("Size of: ", stringify!(IHS_HIDDevice))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_HIDDevice>(),
        8usize,
        concat!("Alignment of ", stringify!(IHS_HIDDevice))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cls) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDDevice),
            "::",
            stringify!(cls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).managed) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDDevice),
            "::",
            stringify!(managed)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_HIDDeviceClass {
    pub alloc: ::std::option::Option<
        unsafe extern "C" fn(cls: *const IHS_HIDDeviceClass) -> *mut IHS_HIDDevice,
    >,
    pub free: ::std::option::Option<unsafe extern "C" fn(device: *mut IHS_HIDDevice)>,
    pub opened: ::std::option::Option<unsafe extern "C" fn(device: *mut IHS_HIDDevice)>,
    #[doc = " Close underlying resources\n @param device Device instance"]
    pub close: ::std::option::Option<unsafe extern "C" fn(device: *mut IHS_HIDDevice)>,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            device: *mut IHS_HIDDevice,
            data: *const u8,
            dataLen: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            device: *mut IHS_HIDDevice,
            dest: *mut IHS_Buffer,
            length: usize,
            timeoutMs: u32,
        ) -> ::std::os::raw::c_int,
    >,
    pub sendFeatureReport: ::std::option::Option<
        unsafe extern "C" fn(
            device: *mut IHS_HIDDevice,
            data: *const u8,
            dataLen: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub getFeatureReport: ::std::option::Option<
        unsafe extern "C" fn(
            device: *mut IHS_HIDDevice,
            reportNumber: *const u8,
            reportNumberLen: usize,
            dest: *mut IHS_Buffer,
            length: usize,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " @param device HID device\n @param out Buffer to write value to\n @return 0 If succeed, -1 if anything wrong happened"]
    pub getVendorString: ::std::option::Option<
        unsafe extern "C" fn(
            device: *mut IHS_HIDDevice,
            out: *mut IHS_Buffer,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " @param device HID device\n @param out Buffer to write value to\n @return 0 If succeed, -1 if anything wrong happened"]
    pub getProductString: ::std::option::Option<
        unsafe extern "C" fn(
            device: *mut IHS_HIDDevice,
            out: *mut IHS_Buffer,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " @param device HID device\n @param out Buffer to write value to\n @return 0 If succeed, -1 if anything wrong happened"]
    pub getSerialNumberString: ::std::option::Option<
        unsafe extern "C" fn(
            device: *mut IHS_HIDDevice,
            out: *mut IHS_Buffer,
        ) -> ::std::os::raw::c_int,
    >,
    pub startInputReports: ::std::option::Option<
        unsafe extern "C" fn(device: *mut IHS_HIDDevice, length: usize) -> ::std::os::raw::c_int,
    >,
    pub requestFullReport: ::std::option::Option<
        unsafe extern "C" fn(device: *mut IHS_HIDDevice) -> ::std::os::raw::c_int,
    >,
    pub requestDisconnect: ::std::option::Option<
        unsafe extern "C" fn(
            device: *mut IHS_HIDDevice,
            method: ::std::os::raw::c_int,
            data: *const u8,
            dataLen: usize,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_IHS_HIDDeviceClass() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_HIDDeviceClass> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_HIDDeviceClass>(),
        112usize,
        concat!("Size of: ", stringify!(IHS_HIDDeviceClass))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_HIDDeviceClass>(),
        8usize,
        concat!("Alignment of ", stringify!(IHS_HIDDeviceClass))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDDeviceClass),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDDeviceClass),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opened) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDDeviceClass),
            "::",
            stringify!(opened)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDDeviceClass),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDDeviceClass),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDDeviceClass),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sendFeatureReport) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDDeviceClass),
            "::",
            stringify!(sendFeatureReport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getFeatureReport) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDDeviceClass),
            "::",
            stringify!(getFeatureReport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getVendorString) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDDeviceClass),
            "::",
            stringify!(getVendorString)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getProductString) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDDeviceClass),
            "::",
            stringify!(getProductString)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getSerialNumberString) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDDeviceClass),
            "::",
            stringify!(getSerialNumberString)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).startInputReports) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDDeviceClass),
            "::",
            stringify!(startInputReports)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requestFullReport) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDDeviceClass),
            "::",
            stringify!(requestFullReport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requestDisconnect) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDDeviceClass),
            "::",
            stringify!(requestDisconnect)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_HIDProvider {
    pub cls: *const IHS_HIDProviderClass,
    pub manager: *mut IHS_HIDManager,
}
#[test]
fn bindgen_test_layout_IHS_HIDProvider() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_HIDProvider> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_HIDProvider>(),
        16usize,
        concat!("Size of: ", stringify!(IHS_HIDProvider))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_HIDProvider>(),
        8usize,
        concat!("Alignment of ", stringify!(IHS_HIDProvider))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cls) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDProvider),
            "::",
            stringify!(cls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).manager) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDProvider),
            "::",
            stringify!(manager)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_HIDProviderClass {
    pub alloc: ::std::option::Option<
        unsafe extern "C" fn(cls: *const IHS_HIDProviderClass) -> *mut IHS_HIDProvider,
    >,
    pub free: ::std::option::Option<unsafe extern "C" fn(provider: *mut IHS_HIDProvider)>,
    pub supportsDevice: ::std::option::Option<
        unsafe extern "C" fn(
            provider: *mut IHS_HIDProvider,
            path: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub openDevice: ::std::option::Option<
        unsafe extern "C" fn(
            provider: *mut IHS_HIDProvider,
            path: *const ::std::os::raw::c_char,
        ) -> *mut IHS_HIDDevice,
    >,
    pub hasChange:
        ::std::option::Option<unsafe extern "C" fn(provider: *mut IHS_HIDProvider) -> bool>,
    pub enumerateDevices: ::std::option::Option<
        unsafe extern "C" fn(provider: *mut IHS_HIDProvider) -> *mut IHS_Enumeration,
    >,
    pub deviceInfo: ::std::option::Option<
        unsafe extern "C" fn(
            provider: *mut IHS_HIDProvider,
            enumeration: *mut IHS_Enumeration,
            info: *mut IHS_HIDDeviceInfo,
        ),
    >,
}
#[test]
fn bindgen_test_layout_IHS_HIDProviderClass() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_HIDProviderClass> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_HIDProviderClass>(),
        56usize,
        concat!("Size of: ", stringify!(IHS_HIDProviderClass))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_HIDProviderClass>(),
        8usize,
        concat!("Alignment of ", stringify!(IHS_HIDProviderClass))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDProviderClass),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDProviderClass),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsDevice) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDProviderClass),
            "::",
            stringify!(supportsDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).openDevice) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDProviderClass),
            "::",
            stringify!(openDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hasChange) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDProviderClass),
            "::",
            stringify!(hasChange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enumerateDevices) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDProviderClass),
            "::",
            stringify!(enumerateDevices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceInfo) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_HIDProviderClass),
            "::",
            stringify!(deviceInfo)
        )
    );
}
extern "C" {
    pub fn IHS_SessionHIDNotifyDeviceChange(session: *mut IHS_Session) -> bool;
}
extern "C" {
    pub fn IHS_SessionHIDSendReport(session: *mut IHS_Session) -> bool;
}
extern "C" {
    pub fn IHS_SessionHIDAddProvider(session: *mut IHS_Session, provider: *mut IHS_HIDProvider);
}
extern "C" {
    pub fn IHS_HIDProviderGetSession(provider: *mut IHS_HIDProvider) -> *mut IHS_Session;
}
extern "C" {
    pub fn IHS_HIDDeviceReportAddFull(device: *mut IHS_HIDDevice, current: *const u8, len: usize);
}
extern "C" {
    pub fn IHS_HIDDeviceReportAddDelta(
        device: *mut IHS_HIDDevice,
        previous: *const u8,
        current: *const u8,
        len: usize,
    );
}
extern "C" {
    pub fn IHS_HIDDeviceLock(device: *mut IHS_HIDDevice);
}
extern "C" {
    pub fn IHS_HIDDeviceUnlock(device: *mut IHS_HIDDevice);
}
extern "C" {
    pub fn IHS_HIDDeviceGetSession(device: *mut IHS_HIDDevice) -> *mut IHS_Session;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IHS_SessionInfo {
    pub address: IHS_SocketAddress,
    pub sessionKey: [u8; 32usize],
    pub sessionKeyLen: usize,
    pub steamId: u64,
}
#[test]
fn bindgen_test_layout_IHS_SessionInfo() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_SessionInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_SessionInfo>(),
        72usize,
        concat!("Size of: ", stringify!(IHS_SessionInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_SessionInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(IHS_SessionInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_SessionInfo),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sessionKey) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_SessionInfo),
            "::",
            stringify!(sessionKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sessionKeyLen) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_SessionInfo),
            "::",
            stringify!(sessionKeyLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).steamId) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_SessionInfo),
            "::",
            stringify!(steamId)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_SessionConfig {
    pub enableAudio: bool,
    pub enableHevc: bool,
}
#[test]
fn bindgen_test_layout_IHS_SessionConfig() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_SessionConfig> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_SessionConfig>(),
        2usize,
        concat!("Size of: ", stringify!(IHS_SessionConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_SessionConfig>(),
        1usize,
        concat!("Alignment of ", stringify!(IHS_SessionConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enableAudio) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_SessionConfig),
            "::",
            stringify!(enableAudio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enableHevc) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_SessionConfig),
            "::",
            stringify!(enableHevc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IHS_StreamSessionCallbacks {
    pub initialized: ::std::option::Option<
        unsafe extern "C" fn(session: *mut IHS_Session, context: *mut ::std::os::raw::c_void),
    >,
    pub connecting: ::std::option::Option<
        unsafe extern "C" fn(session: *mut IHS_Session, context: *mut ::std::os::raw::c_void),
    >,
    pub configuring: ::std::option::Option<
        unsafe extern "C" fn(
            session: *mut IHS_Session,
            config: *mut IHS_SessionConfig,
            context: *mut ::std::os::raw::c_void,
        ),
    >,
    pub connected: ::std::option::Option<
        unsafe extern "C" fn(session: *mut IHS_Session, context: *mut ::std::os::raw::c_void),
    >,
    pub disconnected: ::std::option::Option<
        unsafe extern "C" fn(session: *mut IHS_Session, context: *mut ::std::os::raw::c_void),
    >,
    #[doc = " All the resources and states has been destroyed. Nothing can be used beyond this call.\n @param session Session pointer\n @param context Callback context"]
    pub finalized: ::std::option::Option<
        unsafe extern "C" fn(session: *mut IHS_Session, context: *mut ::std::os::raw::c_void),
    >,
}
#[test]
fn bindgen_test_layout_IHS_StreamSessionCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<IHS_StreamSessionCallbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IHS_StreamSessionCallbacks>(),
        48usize,
        concat!("Size of: ", stringify!(IHS_StreamSessionCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<IHS_StreamSessionCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(IHS_StreamSessionCallbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialized) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamSessionCallbacks),
            "::",
            stringify!(initialized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connecting) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamSessionCallbacks),
            "::",
            stringify!(connecting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).configuring) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamSessionCallbacks),
            "::",
            stringify!(configuring)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connected) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamSessionCallbacks),
            "::",
            stringify!(connected)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disconnected) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamSessionCallbacks),
            "::",
            stringify!(disconnected)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).finalized) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IHS_StreamSessionCallbacks),
            "::",
            stringify!(finalized)
        )
    );
}
extern "C" {
    #[doc = " Create session instance\n @param clientConfig Client info\n @param sessionInfo Session info\n @return Session instance"]
    pub fn IHS_SessionCreate(
        clientConfig: *const IHS_ClientConfig,
        sessionInfo: *const IHS_SessionInfo,
    ) -> *mut IHS_Session;
}
extern "C" {
    #[doc = " Start receive and send thread, and send connect request\n @param session Session instance\n @return"]
    pub fn IHS_SessionConnect(session: *mut IHS_Session) -> bool;
}
extern "C" {
    #[doc = " Send disconnect request\n @param session Session instance"]
    pub fn IHS_SessionDisconnect(session: *mut IHS_Session);
}
extern "C" {
    #[doc = " Wait for all threads to finish\n @param session Session instance"]
    pub fn IHS_SessionThreadedJoin(session: *mut IHS_Session);
}
extern "C" {
    #[doc = " Release all resources of the session and free the pointer\n @param session Session instance"]
    pub fn IHS_SessionDestroy(session: *mut IHS_Session);
}
extern "C" {
    pub fn IHS_SessionSetSessionCallbacks(
        session: *mut IHS_Session,
        callbacks: *const IHS_StreamSessionCallbacks,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn IHS_SessionSetAudioCallbacks(
        session: *mut IHS_Session,
        callbacks: *const IHS_StreamAudioCallbacks,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn IHS_SessionSetVideoCallbacks(
        session: *mut IHS_Session,
        callbacks: *const IHS_StreamVideoCallbacks,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn IHS_SessionSetInputCallbacks(
        session: *mut IHS_Session,
        callbacks: *const IHS_StreamInputCallbacks,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn IHS_SessionSetLogFunction(session: *mut IHS_Session, logFunction: IHS_LogFunction);
}
extern "C" {
    pub fn IHS_SessionGetInfo(session: *const IHS_Session) -> *const IHS_SessionInfo;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
